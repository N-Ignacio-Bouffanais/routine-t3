// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId            String    @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.String
    access_token      String?   @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId, id(sort: Desc)])
}

model Session {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, id(sort: Desc)])
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    hashedPassword String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    accounts      Account[]
    sessions      Session[]
    exercises      Exercise[]
}

model VerificationToken {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// models exercises

model Exercise {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    day String
    nameEx String
    reps Int
    weight Int
    sets Int
    userId    String? @db.ObjectId
    user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, createdAt(sort: Desc)])
}

