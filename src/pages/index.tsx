import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import Image from 'next/image'
import { getProviders, signIn, useSession, getSession } from "next-auth/react";


const Home: NextPage = () => {
  const routines = api.exercise.get.useQuery();
  console.log(routines.data)

  return (
    <>
      <Head>
        <title>Routine App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex bg-dark-blue ">
        <div className="grid grid-cols-1 w-4/5 mx-auto sm:grid-cols-3 gap-4">
          <div className="flex flex-col items-center sm:col-span-2">
            <h1 className="text-white font-semibold text-3xl py-3 w-auto">Make yours routines</h1>
            <picture className=''>
              <Image className="rounded-xl" src={"/running.jpg"} alt="Picture of a man doing workout" width={380} height={400} />
            </picture>
          </div>
          <div className="flex flex-col items-center mx-auto justify-center sm:col-span-1">
            <p className='text-gray-400 my-3 w-96 text-center text-sm sm:w-full'>Make your own workout routines and define how and when do it.</p>
            <AuthShowcase/>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  return (
    <>
      {!sessionData && <div className="flex flex-col">
        <button
          className="py-2.5 text-white bg-black rounded-full my-3 w-48 font-semibold hover:bg-slate-800"
          onClick={() => void signIn('github')}
        >Sign In with GitHub
        </button>
        <button
          className="py-2.5 text-white bg-blue-600 rounded-full my-3 w-48 font-semibold hover:bg-blue-700"
          onClick={() => void signIn('google')}
        >Sign In with Google
        </button>
      </div>}
      
    </>
  );
};

export async function getServerSideProps(context: any) {
  const session = await getSession(context)
  if (session) {
    return {
      redirect: {
        destination: '/home',
        permanent: false,
      }
    }
  }
  return { props: { providers: await getProviders() } };
}


